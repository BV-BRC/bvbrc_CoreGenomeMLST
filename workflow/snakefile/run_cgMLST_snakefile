import glob
import json
import os

msg = 'Checkpoint 5: snakefile command recieved - Chewbaca analysis \n'
sys.stderr.write(msg)

current_directory = os.getcwd()
# Load the JSON data
with open('{}/config.json'.format(current_directory)) as f:
    data = json.load(f)
clean_fasta_dir = data["clean_data_dir"]
work_data_dir = data["work_data_dir"]
output_dir = data["output_data_dir"]
schema_path = os.path.join(data["schema_location"], data["params"]["input_schema_selection"])

rule_all_list = [
                "{}/clean_fastas_complete.txt".format(work_data_dir),
                "{}/allele_call_complete.txt".format(work_data_dir),
                "{}/allele_call_evaulator_complete.txt".format(work_data_dir),
                "{}/extract_cg_mlst/presence_absence.tsv".format(output_dir),
                ]

rule all:
    input:
        rule_all_list

rule prep_fastas_for_chewbbaca:
    input:
        config = '{}/config.json'.format(current_directory)
    output:
        touchpoint = "{}/clean_fastas_complete.txt".format(work_data_dir)
    shell:
        """
        core-genome-mlst-utils clean-fasta-filenames \
            {input.config}

        touch {output.touchpoint}
        """


rule run_allele_call:
    input:
        touchpoint = "{}/clean_fastas_complete.txt".format(work_data_dir)
    params:
        allele_call_out = "{}/allele_call/".format(output_dir),
        clean_fasta_dir_ = clean_fasta_dir,
        schema_dir = schema_path
    output:
        touchpoint = "{}/allele_call_complete.txt".format(work_data_dir)
    shell:
        """
        chewBBACA.py AlleleCall \
            --input-files {params.clean_fasta_dir_} \
            --schema-directory {params.schema_dir} \
            --output-directory {params.allele_call_out} \
            --cpu 4 \
            --output-unclassified \
            --output-missing \
            --no-inferred
        
        touch {output.touchpoint}
        """

rule run_allele_call_evaluator:
    input:
        touchpoint = "{}/allele_call_complete.txt".format(work_data_dir),
    params:
        allele_call_in = directory("{}/allele_call/".format(output_dir)),
        allele_call_out = directory("{}/allele_call_evaulator/".format(output_dir)),
        schema_dir = schema_path,
    output:
        touchpoint = "{}/allele_call_evaulator_complete.txt".format(work_data_dir)
    shell:
        """
        chewBBACA.py AlleleCallEvaluator \
            --input-files {params.allele_call_in} \
            --schema-directory {params.schema_dir} \
            --output-directory {params.allele_call_out} \
            --cpu 4

        touch {output.touchpoint}
        """

rule extract_cgMLST:
    input:
        touchpoint = "{}/allele_call_evaulator_complete.txt".format(work_data_dir)
    params:
        allele_call_result = "{}/allele_call/results_alleles.tsv".format(output_dir),
        extract_cgmlst_out = directory("{}/extract_cg_mlst/".format(output_dir))
    output:
        "{}/extract_cg_mlst/presence_absence.tsv".format(output_dir)
    shell:
        """
        chewBBACA.py ExtractCgMLST \
            --input-file {params.allele_call_result} \
            --output-directory {params.extract_cgmlst_out}
        """